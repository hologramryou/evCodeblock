import * as Blockly from 'blockly';

export const jsonGenerator = new Blockly.Generator('JSON');

const Order = {
  ATOMIC: 0,
};

jsonGenerator.forBlock['logic_null'] = function(block) {
  return ['ĐỊT MẸ MÀY', Order.ATOMIC];
};

jsonGenerator.forBlock['text'] = function(block) {
  const textValue = block.getFieldValue('TEXT');
  const code = `"${textValue}"`;
  return [code, Order.ATOMIC];
};


// Generator for the 'print' block
jsonGenerator.forBlock['print'] = function(block, generator) {
  // Get the MEMBER_VALUE, which is generated by any connected block (e.g., a 'text' block)
    
    const value = generator.valueToCode(
        block, 'MEMBER_VALUE', Order.ATOMIC);

  // Generate code in the form of print("value")
  const code = `alert(${value});\n`;  // Adding semicolon and newline for separation
  return code;
};

// Generator for the 'print' block
jsonGenerator.forBlock['move'] = function(block, generator) {
  // Get the MEMBER_VALUE, which is generated by any connected block (e.g., a 'text' block)
    
    const value = generator.valueToCode(
        block, 'MEMBER_VALUE', Order.ATOMIC);

  // Generate code in the form of print("value")
  const code = `sendData(${value});\n`;  // Adding semicolon and newline for separation
  return code;
};

// Generator for the 'print' block
jsonGenerator.forBlock['up'] = function(block, generator) {
  // Get the MEMBER_VALUE, which is generated by any connected block (e.g., a 'text' block)
    
    const value = generator.valueToCode(
        block, 'MEMBER_VALUE', Order.ATOMIC);

  // Generate code in the form of print("value")
  const code = `Lên(${value});\n`;  // Adding semicolon and newline for separation
  return code;
};


jsonGenerator.forBlock['math_number'] = function(block) {
  const code = String(block.getFieldValue('NUM'));
  return [code, Order.ATOMIC];
};

jsonGenerator.forBlock['logic_boolean'] = function(block) {
  const code = (block.getFieldValue('BOOL') === 'TRUE') ? 'true' : 'false';
  return [code, Order.ATOMIC];
};

jsonGenerator.forBlock['member'] = function(block, generator) {
  const name = block.getFieldValue('MEMBER_NAME');
  const value = generator.valueToCode(
      block, 'MEMBER_VALUE', Order.ATOMIC);
  const code = `"${name}": ${value}`;
  return code;
};

jsonGenerator.forBlock['lists_create_with'] = function(block, generator) {
  const values = [];
  for (let i = 0; i < block.itemCount_; i++) {
    const valueCode = generator.valueToCode(block, 'ADD' + i,
        Order.ATOMIC);
    if (valueCode) {
      values.push(valueCode);
    }
  }
  const valueString = values.join(',\n');
  const indentedValueString =
      generator.prefixLines(valueString, generator.INDENT);
  const codeString = '[\n' + indentedValueString + '\n]';
  return [codeString, Order.ATOMIC];
};

jsonGenerator.forBlock['object'] = function(block, generator) {
  const statementMembers =
      generator.statementToCode(block, 'MEMBERS');
  const code = '{\n' + statementMembers + '\n}';
  return [code, Order.ATOMIC];
};
//new

jsonGenerator.forBlock['speak'] = function(block) {
  const textValue = jsonGenerator.valueToCode(block, 'TEXT', Order.ATOMIC) || '""';
  const code = `console.log(${textValue});\n`; // Replace with alert, speech synthesis, etc.
  return code;
};
jsonGenerator.forBlock['think'] = function(block) {
  const textValue = jsonGenerator.valueToCode(block, 'TEXT', Order.ATOMIC) || '""';
  const code = `console.debug(${textValue});\n`; // Replace with other options if needed
  return code;
};

jsonGenerator.forBlock['wait'] = function(block) {
  const time = block.getFieldValue('TIME');  // Get the time from the block field
  const code = `Đợi(${time} giây);`;  // The generated code
  return [code, Order.ATOMIC];
};
jsonGenerator.forBlock['repeat'] = function(block, generator) {
  const times = block.getFieldValue('TIMES');  // Get the number of repetitions from the block
  const statementCode = generator.statementToCode(block, 'DO');  // Get the code to repeat
  
  // Create a for-loop that repeats the code 'times' number of times
  const code = `for (let i = 0; i < ${times}; i++) {\n${statementCode}\n}\n`;
  return code;
};
jsonGenerator.forBlock['forever'] = function(block, generator) {
  const statementCode = generator.statementToCode(block, 'DO');  // Get the code inside the block
  
  // Create a while loop that runs indefinitely
  const code = `while (true) {\n${statementCode}\n}\n`;
  return code;
};
jsonGenerator.forBlock['if'] = function(block, generator) {
  const condition = generator.valueToCode(block, 'CONDITION', Order.ATOMIC);  // Get the condition for the 'if' statement
  const statementCode = generator.statementToCode(block, 'DO');  // Get the actions to perform if the condition is true
  
  // Generate the if statement with the condition and actions inside
  const code = `if (${condition}) {\n${statementCode}\n}\n`;
  return code;
};
jsonGenerator.forBlock['if_else'] = function(block, generator) {
  const condition = generator.valueToCode(block, 'CONDITION', Order.ATOMIC);  // Get the condition for the 'if' statement
  const statementCode = generator.statementToCode(block, 'DO');  // Get the actions to perform if the condition is true
  const elseStatementCode = generator.statementToCode(block, 'ELSE');  // Get the actions to perform if the condition is false
  
  // Generate the if-else statement with the condition and actions inside
  const code = `if (${condition}) {\n${statementCode}\n} else {\n${elseStatementCode}\n}\n`;
  return code;
};
jsonGenerator.forBlock['wait_until'] = function(block, generator) {
  const condition = generator.valueToCode(block, 'CONDITION', Order.ATOMIC);  // Get the condition for waiting

  // Generate the code to repeatedly check the condition
  const code = `while (!${condition}) {\n  // Đợi\n}\n`;
  return code;
};
jsonGenerator.forBlock['repeat_until'] = function(block, generator) {
  const condition = generator.valueToCode(block, 'CONDITION', Order.ATOMIC);  // Get the condition for the loop
  const statementCode = generator.statementToCode(block, 'DO');  // Get the actions to perform while looping

  // Generate the code to repeatedly check the condition and perform the action
  const code = `do {\n${statementCode}} while (!${condition});\n`;
  return code;
};
jsonGenerator.forBlock['stop'] = function(block) {
  // The code for stopping the program or exiting a loop is a break statement
  const code = 'break;\n';  // This is the JavaScript equivalent of stopping execution in a loop
  return code;
};
jsonGenerator.forBlock['key_pressed'] = function(block) {
  const key = block.getFieldValue('KEY');  // Get the selected key from the dropdown
  const code = `document.addEventListener('keydown', (event) => event.key === '${key}')`;
  return [code, Order.ATOMIC];
};
jsonGenerator.forBlock['ultrasonic_sensor_status'] = function(block) {
  // Replace `getUltrasonicSensor1Distance` with the actual function or API call
  // that retrieves the distance measurement from Ultrasonic Sensor 1.
  const code = 'getUltrasonicSensor1Distance()';
  return [code, Order.ATOMIC];
};
jsonGenerator.forBlock['ultrasonic_sensor2_status'] = function(block) {
  // Replace `getUltrasonicSensor2Distance` with the actual function that reads
  // the distance from Ultrasonic Sensor 2
  const code = 'getUltrasonicSensor2Distance()';
  return [code, Order.ATOMIC];
};

jsonGenerator.scrub_ = function(block, code, thisOnly) {
  const nextBlock =
      block.nextConnection && block.nextConnection.targetBlock();
  if (nextBlock && !thisOnly) {
    return code + ',\n' + jsonGenerator.blockToCode(nextBlock);
  }
  return code;
};
